#!/bin/sh

# freevo - the main entry point to the whole suite of applications
#
# $Id$
#



# get information about freevo dir and the name we called with
if stat $0 | head -n 1 | grep "' -> \`" > /dev/null ; then
    script=`stat $0 | head -n 1 | sed "s/.*' -> .\\(.*\\)./\\1/"`
else
    script=`echo $0`
fi

call=`basename $0`
export FREEVO_HOME=`dirname $script`
export FREEVO_SCRIPT=$script

# Keep track of where we started. This env var is used inside Freevo.
export FREEVO_STARTDIR=$PWD

# Is runapp present? If not it needs to be compiled
if [ ! -e "$FREEVO_HOME/runapp" ]; then
    echo
    echo "*************************************************************"
    echo "* Please note that there is a standalone binary release     *"
    echo "* of Freevo with all dependencies included. Use that unless *"
    echo "* you are really capable of installing Freevo from source   *"
    echo "* without assistance from the mailing lists or irc!         *"
    echo "*************************************************************"
    echo
    echo "Freevo not compiled (runapp executable not found)"
    echo
    exit 1
fi

# find out where all the needed files are
if [ -e "$FREEVO_HOME/src/plugins" ]; then
    # starting from src
    helpers=src/helpers
    $FREEVO_PYTHON=$FREEVO_HOME/src
    export FREEVO_SHARE=share

elif [ -e "$FREEVO_HOME/../share/freevo" ]; then
    export FREEVO_HOME=$FREEVO_HOME/../share/freevo

    # find the freevo libs
    python -c 'import freevo' || exit 1
    export FREEVO_PYTHON=`python -c 'import freevo; print freevo.__path__' | \
                   sed 's/..\(.*\)../\1/'`
    # installed version
    helpers=$FREEVO_PYTHON/helpers
    export FREEVO_SHARE=$FREEVO_HOME

else
    echo "can't find freevo data files"
    exit 1
fi

# Set this globaly, everything here should have access to these modules.
export PYTHONPATH=$FREEVO_HOME:$FREEVO_PYTHON:$FREEVO_PYTHON/www:$FREEVO_PYTHON/tv

# call new x session if needed
if [ "$call" = "freevo" -a "$1" = "-fs" ]; then
    servernum=0

    while true; do
	test -e /tmp/.X11-unix/X$servernum || break
	let servernum+=1
    done

    exec xinit $0 --force-fs -- :$servernum
fi


# call helper if the script is called as wrapper
if [ "$call" = "freevo" ]; then
    script="$FREEVO_HOME/$helpers/$1.py"
    if [ -e "$script" ]; then
	shift
    fi
else
    script="$FREEVO_HOME/$helpers/$call.py"
fi

if [ -e "$script" ]; then
    "$FREEVO_HOME/runapp" python "$script" "$@"
    exit 0
fi


if [ -w /var/run ] ; then
    PID_DIR=/var/run
else
    PID_DIR=/tmp
fi


if [ "$1" = "update" ] ; then
    if [ "$2" = "" ]; then
	echo "usage: freevo update path-of-freevo-binary-release"
	echo
	echo "warning: the update will delete all files in the src and"
	echo "and the skin directory except the personal plugins."
	exit 1
    fi
    echo "updating freevo binary release in $2"
    find $2/src | grep -v /plugins/ | xargs rm -rf
    rm -rf $2/src/skins $2/WIP
    cp -r * $2
    exit 0
fi


# Help
if [ "$1" = "--help" -o "$1" = "-" ] ; then
    echo "freevo [ script | options]"
    echo "options:"
    echo "  -fs            start freevo in a new x session in fullscreen"
    echo "  setup          run freevo setup to scan your environment"
    echo "  execute [file] execute a script inside the freevo environment"
    echo "  stop           stop the current freevo process"
    echo
    echo "freevo can start the following scripts, use --help on these"
    echo "scripts to get more informations about options"
    echo

    for i in $helpers/*.py; do
	s=`echo $i | sed "s|^$helpers.\\(.*\\).py|\\1|"`
	if [ "$s" != "__init__" ]; then
	    echo $s
	fi
    done
    echo
    echo "You can also create a symbolic link to free with the name of the"
    echo "script you want to execute. E.g. put a link imdb pointing to freevo"
    echo "in your patch to access the imdb helper script"
    echo
    echo "Before running freevo the first time, you need to run 'freevo setup'"
    echo "After that, you can run freevo without parameter."
    echo
    exit 0
fi

# Create the config file.
if [ "$1" = "setup" ] ; then
    shift 1
    ./runapp python $FREEVO_PYTHON/setup_freevo.py $@
    exit 0
fi

# Is freevo.conf present? If not, ./configure is needed
# Check the possible locations in prio order
if [ ! -e $FREEVO_STARTDIR/freevo.conf ]; then
    if [ ! -e $HOME/.freevo/freevo.conf ]; then
        if [ ! -e /etc/freevo/freevo.conf ]; then
            if [ ! -e ./freevo.conf ]; then
                echo "Please run 'freevo setup' first (freevo.conf not found)"
                exit 1
            fi
        fi
    fi
fi

# Support starting something with runapp
if [ "$1" = "runapp" ] ; then
    shift
    if [ -e "runtime/apps/$1" ]; then
	app=runtime/apps/$1
    else
	app=""
	for p in `echo $PATH | sed 's/:/ /g'`; do 
	    if [ -e "$p/$1" ]; then
		app="$p/$1"
		break
	    fi
	done
	if [ "$app" = "" ]; then
	    echo $1 not found
	    exit 1
	fi
    fi
    shift
    ./runapp "$app" "$@"
    exit 0
fi
    
# Support for using just Python
if [ "$1" = "prompt" ] ; then
    ./runapp python
    exit 0
fi
    
# Support executing a standalone Python application, e.g. epg_xmltv.py
# Usage: freevo execute appname.py arg1 arg2...
if [ "$1" = "execute" ] ; then
    shift 1
    APP=`basename $1`
    PID_FILE=$PID_DIR/freevo-$APP.pid

    # Exit if there is one already running
    if [ -f $PID_FILE ] ; then
        PID=`cat $PID_FILE`
        RUNNING=`ps -ef | grep " $PID " | grep $APP`
        if [ ! "$RUNNING" = "" ] ; then
          echo "Freevo's $APP is already running as process $PID."
          exit 0
        fi
    fi

    trap './freevo stop $APP' 1 2 15
    ./runapp python $@ &
    echo PID is $!
    echo $! > $PID_FILE
    wait `cat $PID_FILE`
    rm $PID_FILE > /dev/null 2>&1
    exit 0
fi

# Support for stopping something that was started with ./freevo execute
# Usage: freevo stop appname.py 
if [ "$1" = "stop" ] ; then
    shift 1
    if [ "$1" = "" ] ; then
        PID_FILE=$PID_DIR/freevo-main.pid
    else
        PID_FILE=$PID_DIR/freevo-`basename $1`.pid
    fi
    kill -KILL `cat $PID_FILE` > /dev/null 2>&1
    rm $PID_FILE > /dev/null 2>&1
    exit 0
fi

# Exit if there is a Freevo still running
PID_FILE=$PID_DIR/freevo-main.pid
if [ -f $PID_FILE ] ; then
    PID=`cat $PID_FILE`
    RUNNING=`ps -ef | grep " $PID " | grep main`
    if [ ! "$RUNNING" = "" ] ; then
      echo "Freevo is already running as process $PID."
      exit 0
    fi
fi

trap './freevo stop' 1 2 15

# Start the main freevo application
./runapp python -OO $FREEVO_PYTHON/main.py $@ &

echo $! > $PID_FILE
wait `cat $PID_FILE`

# Freevo exited, make sure all children are killed
sleep 1

# For now I think we still need the kludge for freevo_xwin
killall -9 freevo_xwin > /dev/null 2>&1

rm $PID_FILE > /dev/null 2>&1

exit 0
