diff -u -r --new-file cvs/SDL12/configure.in SDL12/configure.in
--- cvs/SDL12/configure.in	Wed Nov 20 08:43:39 2002
+++ SDL12/configure.in	Fri Nov 22 08:20:20 2002
@@ -1000,6 +1000,25 @@
     fi
 }
 
+dnl Set up the Dxr3 video driver.
+CheckDxr3Video()
+{
+    AC_ARG_ENABLE(video-dxr3,
+[  --enable-video-dxr3    use dxr3 video driver [default=yes]],
+                  , enable_video_dxr3=yes)
+    if test x$enable_video_dxr3 = xyes; then
+      CFLAGS="$CFLAGS -DENABLE_DXR3VIDEO"
+      VIDEO_SUBDIRS="$VIDEO_SUBDIRS dxr3"
+      VIDEO_DRIVERS="$VIDEO_DRIVERS dxr3/libvideo_dxr3.la"
+
+      DXR3_CFLAGS=`libfame-config --cflags`
+      DXR3_LIBS=`libfame-config --libs`
+
+      AC_SUBST(DXR3_CFLAGS)
+      AC_SUBST(DXR3_LIBS)
+    fi
+}
+
 dnl Check to see if OpenGL support is desired
 AC_ARG_ENABLE(video-opengl,
 [  --enable-video-opengl   include OpenGL context creation [default=yes]],
@@ -1680,6 +1699,7 @@
 case "$target" in
     *-*-linux*)
         ARCH=linux
+        CheckDxr3Video
         CheckDummyVideo
         CheckDiskAudio
         CheckDLOPEN
@@ -2623,6 +2643,7 @@
 src/video/photon/Makefile
 src/video/epoc/Makefile
 src/video/dummy/Makefile
+src/video/dxr3/Makefile
 src/video/ataricommon/Makefile
 src/video/xbios/Makefile
 src/video/gem/Makefile
diff -u -r --new-file cvs/SDL12/src/video/Makefile.am SDL12/src/video/Makefile.am
--- cvs/SDL12/src/video/Makefile.am	Thu Oct 17 15:03:36 2002
+++ SDL12/src/video/Makefile.am	Fri Nov 22 08:20:20 2002
@@ -5,7 +5,7 @@
 
 # Define which subdirectories need to be built
 SUBDIRS = @VIDEO_SUBDIRS@
-DIST_SUBDIRS = dummy x11 dga nanox fbcon directfb vgl svga ggi aalib \
+DIST_SUBDIRS = dxr3 dummy x11 dga nanox fbcon directfb vgl svga ggi aalib \
                wincommon windib windx5 \
                maccommon macdsp macrom quartz \
                bwindow ps2gs photon cybergfx epoc picogui \
diff -u -r --new-file cvs/SDL12/src/video/SDL_sysvideo.h SDL12/src/video/SDL_sysvideo.h
--- cvs/SDL12/src/video/SDL_sysvideo.h	Thu Oct 17 15:03:36 2002
+++ SDL12/src/video/SDL_sysvideo.h	Fri Nov 22 08:20:20 2002
@@ -394,6 +394,9 @@
 #ifdef ENABLE_DUMMYVIDEO
 extern VideoBootStrap DUMMY_bootstrap;
 #endif
+#ifdef ENABLE_DXR3VIDEO
+extern VideoBootStrap DXR3_bootstrap;
+#endif
 #ifdef ENABLE_XBIOS
 extern VideoBootStrap XBIOS_bootstrap;
 #endif
diff -u -r --new-file cvs/SDL12/src/video/SDL_video.c SDL12/src/video/SDL_video.c
--- cvs/SDL12/src/video/SDL_video.c	Wed Nov 20 08:43:42 2002
+++ SDL12/src/video/SDL_video.c	Fri Nov 22 08:20:20 2002
@@ -105,6 +105,9 @@
 #ifdef ENABLE_DUMMYVIDEO
 	&DUMMY_bootstrap,
 #endif
+#ifdef ENABLE_DXR3VIDEO
+	&DXR3_bootstrap,
+#endif
 #ifdef ENABLE_XBIOS
 	&XBIOS_bootstrap,
 #endif
diff -u -r --new-file cvs/SDL12/src/video/dxr3/Makefile.am SDL12/src/video/dxr3/Makefile.am
--- cvs/SDL12/src/video/dxr3/Makefile.am	Thu Jan  1 01:00:00 1970
+++ SDL12/src/video/dxr3/Makefile.am	Fri Nov 22 08:20:20 2002
@@ -0,0 +1,18 @@
+
+## Makefile.am for SDL using the dxr3 video driver
+
+CFLAGS = @CFLAGS@ $(DXR3_CFLAGS)
+
+noinst_LTLIBRARIES = libvideo_dxr3.la
+libvideo_dxr3_la_SOURCES = $(DXR3_SRCS)
+libvideo_dxr3_la_LIBADD  = $(DXR3_LIBS)
+
+# The SDL null video driver sources
+DXR3_SRCS = 			\
+	SDL_dxr3video.h		\
+	SDL_dxr3events.c	\
+	SDL_dxr3events_c.h	\
+	SDL_dxr3mouse.c		\
+	SDL_dxr3mouse_c.h	\
+	SDL_dxr3video.c
+
diff -u -r --new-file cvs/SDL12/src/video/dxr3/SDL_dxr3events.c SDL12/src/video/dxr3/SDL_dxr3events.c
--- cvs/SDL12/src/video/dxr3/SDL_dxr3events.c	Thu Jan  1 01:00:00 1970
+++ SDL12/src/video/dxr3/SDL_dxr3events.c	Fri Nov 22 08:20:45 2002
@@ -0,0 +1,234 @@
+/*
+    SDL - Simple DirectMedia Layer
+    Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002  Sam Lantinga
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Library General Public
+    License as published by the Free Software Foundation; either
+    version 2 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Library General Public License for more details.
+
+    You should have received a copy of the GNU Library General Public
+    License along with this library; if not, write to the Free
+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+
+    Sam Lantinga
+    slouken@libsdl.org
+*/
+
+#ifdef SAVE_RCSID
+static char rcsid =
+ "@(#) $Id$";
+#endif
+
+/* Being a dxr3 driver, there's no event stream. We just define stubs for
+   most of the API. */
+
+#include "SDL.h"
+#include "SDL_sysevents.h"
+#include "SDL_keysym.h"
+#include "SDL_events_c.h"
+#include "SDL_dxr3video.h"
+#include "SDL_dxr3events_c.h"
+
+#include <time.h>
+#include <sys/time.h>
+#include <sys/types.h>
+#include <unistd.h>
+
+int DXR3_OpenKeyboard(_THIS)
+{
+	struct SDL_PrivateVideoData *data = (struct SDL_PrivateVideoData*)this->hidden;
+	struct termios tio_new;
+
+//	fprintf(stderr,"DXR3_OpenKeyboard() called.\n");
+
+	ioctl(0,TCGETS,&data->tio_orig);
+
+	memcpy(&tio_new,&data->tio_orig,sizeof(struct termios));
+	tio_new.c_lflag &= ~(ICANON|ECHO); /* Clear ICANON and ECHO. */
+	tio_new.c_cc[VMIN] = 1;
+	tio_new.c_cc[VTIME] = 0;
+
+	ioctl(0,TCSETS,&tio_new);
+
+	return 0;
+}	
+
+void DXR3_CloseKeyboard(_THIS)
+{
+	struct SDL_PrivateVideoData *data = (struct SDL_PrivateVideoData*)this->hidden;
+
+//	fprintf(stderr,"DXR3_CloseKeyboard() called.\n");
+
+	ioctl(0,TCSETS,&data->tio_orig);
+
+	if ( data->fd_keyboard >= 0 ) {
+		/* not necessary... */
+		/* close(data->fd_keyboard); */
+	}
+	data->fd_keyboard = -1;
+}
+
+#ifdef axa
+static SDL_keysym *TranslateKey(int scancode, SDL_keysym *keysym)
+{
+//	fprintf(stderr,"TranslateKey() called.\n");
+	/* Set the keysym information */
+	keysym->scancode = scancode;
+	keysym->sym = scancode; // keymap[scancode];
+	keysym->mod = KMOD_NONE;
+
+	/* If UNICODE is on, get the UNICODE value for the key */
+	keysym->unicode = 0;
+	if ( SDL_TranslateUNICODE ) {
+		int map;
+		SDLMod modstate;
+
+		modstate = SDL_GetModState();
+		map = 0;
+		if ( modstate & KMOD_SHIFT ) {
+			map |= (1<<KG_SHIFT);
+		}
+		if ( modstate & KMOD_CTRL ) {
+			map |= (1<<KG_CTRL);
+		}
+		if ( modstate & KMOD_ALT ) {
+			map |= (1<<KG_ALT);
+		}
+		if ( modstate & KMOD_MODE ) {
+			map |= (1<<KG_ALTGR);
+		}
+		if ( KTYP(vga_keymap[map][scancode]) == KT_LETTER ) {
+			if ( modstate & KMOD_CAPS ) {
+				map ^= (1<<KG_SHIFT);
+			}
+		}
+		if ( KTYP(vga_keymap[map][scancode]) == KT_PAD ) {
+			if ( modstate & KMOD_NUM ) {
+				keysym->unicode=KVAL(vga_keymap[map][scancode]);
+			}
+		} else {
+			keysym->unicode = KVAL(vga_keymap[map][scancode]);
+		}
+	}
+	return(keysym);
+}
+#endif
+
+static void handle_keyboard(_THIS)
+{
+	struct SDL_PrivateVideoData *data = (struct SDL_PrivateVideoData*)this->hidden;
+
+	unsigned char keybuf[BUFSIZ];
+	int i, nread;
+	SDL_keysym keysym;
+
+	struct timespec	ts;
+	ts.tv_sec = 0;
+	ts.tv_nsec = 50*1000;
+
+//	fprintf(stderr,"handle_keyboard() in.\n");
+
+	nread = read(data->fd_keyboard, keybuf, BUFSIZ);
+	i = 0;
+	while( i < nread) {
+
+
+		memset(&keysym, 0, sizeof(keysym));
+		keysym.mod = KMOD_NONE;
+		keysym.unicode = 0;
+
+		if( (nread-i) >= 3 ) {
+			if(keybuf[i] == 27 && keybuf[i+1] == 91) {
+				switch( keybuf[i+2] ) {
+				case 68: {
+					keysym.sym = SDLK_LEFT;
+					break;
+				}
+				case 67: {
+					keysym.sym = SDLK_RIGHT;
+					break;
+				}
+				case 65: {
+					keysym.sym = SDLK_UP;
+					break;
+				}
+				case 66: {
+					keysym.sym = SDLK_DOWN;
+					break;
+				}
+				default: {
+					printf("unknow key: %d\n",keybuf[i+2]);
+					break;
+				}
+				}
+			data->posted += SDL_PrivateKeyboard(SDL_PRESSED, &keysym);
+			data->posted += SDL_PrivateKeyboard(SDL_RELEASED, &keysym);
+			i += 3;
+			continue;
+			}	
+		}
+		switch( keybuf[i] ) {
+			case 10:
+				keysym.sym = SDLK_RETURN;
+				break;
+			default: 
+				keysym.sym = keybuf[i]; 
+				break;
+			
+		}
+//		printf("key pressed: %d\n",keysym.sym);
+		
+		i += 1;
+		data->posted += SDL_PrivateKeyboard(SDL_PRESSED, &keysym);
+		data->posted += SDL_PrivateKeyboard(SDL_RELEASED, &keysym);
+//		nanosleep(&ts,NULL);
+	}
+
+//	fprintf(stderr,"handle_keyboard() out.\n");
+}
+
+void DXR3_PumpEvents(_THIS)
+{
+	struct SDL_PrivateVideoData *data = (struct SDL_PrivateVideoData*)this->hidden;
+
+	fd_set fdset;
+	int max_fd;
+	static struct timeval zero;
+
+//	fprintf(stderr,"DXR3_PumpEvents() in.\n");
+
+	do {
+		data->posted = 0;
+
+		FD_ZERO(&fdset);
+		max_fd = 0;
+		if ( data->fd_keyboard >= 0 ) {
+			FD_SET(data->fd_keyboard, &fdset);
+			if ( max_fd < data->fd_keyboard ) {
+				max_fd = data->fd_keyboard;
+			}
+		}
+		if ( select(max_fd+1, &fdset, NULL, NULL, &zero) > 0 ) {
+			if ( data->fd_keyboard >= 0 ) {
+				if ( FD_ISSET(data->fd_keyboard, &fdset) ) {
+					handle_keyboard(this);
+				}
+			}
+		}
+	} while ( data->posted );
+//	fprintf(stderr,"DXR3_PumpEvents() out.\n");
+}
+
+void DXR3_InitOSKeymap(_THIS)
+{
+	/* do nothing. */
+}
+
+/* end of SDL_dxr3events.c ... */
+
diff -u -r --new-file cvs/SDL12/src/video/dxr3/SDL_dxr3events_c.h SDL12/src/video/dxr3/SDL_dxr3events_c.h
--- cvs/SDL12/src/video/dxr3/SDL_dxr3events_c.h	Thu Jan  1 01:00:00 1970
+++ SDL12/src/video/dxr3/SDL_dxr3events_c.h	Fri Nov 22 08:20:20 2002
@@ -0,0 +1,39 @@
+/*
+    SDL - Simple DirectMedia Layer
+    Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002  Sam Lantinga
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Library General Public
+    License as published by the Free Software Foundation; either
+    version 2 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Library General Public License for more details.
+
+    You should have received a copy of the GNU Library General Public
+    License along with this library; if not, write to the Free
+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+
+    Sam Lantinga
+    slouken@libsdl.org
+*/
+
+#ifdef SAVE_RCSID
+static char rcsid =
+ "@(#) $Id$";
+#endif
+
+#include "SDL_dxr3video.h"
+
+/* Variables and functions exported by SDL_sysevents.c to other parts 
+   of the native video subsystem (SDL_sysvideo.c)
+*/
+extern void DXR3_InitOSKeymap(_THIS);
+extern void DXR3_PumpEvents(_THIS);
+extern int  DXR3_OpenKeyboard(_THIS);
+extern void DXR3_CloseKeyboard(_THIS);
+
+/* end of SDL_dxr3events_c.h ... */
+
diff -u -r --new-file cvs/SDL12/src/video/dxr3/SDL_dxr3mouse.c SDL12/src/video/dxr3/SDL_dxr3mouse.c
--- cvs/SDL12/src/video/dxr3/SDL_dxr3mouse.c	Thu Jan  1 01:00:00 1970
+++ SDL12/src/video/dxr3/SDL_dxr3mouse.c	Fri Nov 22 08:20:20 2002
@@ -0,0 +1,40 @@
+/*
+    SDL - Simple DirectMedia Layer
+    Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002  Sam Lantinga
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Library General Public
+    License as published by the Free Software Foundation; either
+    version 2 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Library General Public License for more details.
+
+    You should have received a copy of the GNU Library General Public
+    License along with this library; if not, write to the Free
+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+
+    Sam Lantinga
+    slouken@libsdl.org
+*/
+
+#ifdef SAVE_RCSID
+static char rcsid =
+ "@(#) $Id$";
+#endif
+
+#include <stdio.h>
+
+#include "SDL_error.h"
+#include "SDL_mouse.h"
+#include "SDL_events_c.h"
+
+#include "SDL_dxr3mouse_c.h"
+
+
+/* The implementation dependent data for the window manager cursor */
+struct WMcursor {
+	int unused;
+};
diff -u -r --new-file cvs/SDL12/src/video/dxr3/SDL_dxr3mouse_c.h SDL12/src/video/dxr3/SDL_dxr3mouse_c.h
--- cvs/SDL12/src/video/dxr3/SDL_dxr3mouse_c.h	Thu Jan  1 01:00:00 1970
+++ SDL12/src/video/dxr3/SDL_dxr3mouse_c.h	Fri Nov 22 08:20:20 2002
@@ -0,0 +1,30 @@
+/*
+    SDL - Simple DirectMedia Layer
+    Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002  Sam Lantinga
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Library General Public
+    License as published by the Free Software Foundation; either
+    version 2 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Library General Public License for more details.
+
+    You should have received a copy of the GNU Library General Public
+    License along with this library; if not, write to the Free
+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+
+    Sam Lantinga
+    slouken@libsdl.org
+*/
+
+#ifdef SAVE_RCSID
+static char rcsid =
+ "@(#) $Id$";
+#endif
+
+#include "SDL_dxr3video.h"
+
+/* Functions to be exported */
diff -u -r --new-file cvs/SDL12/src/video/dxr3/SDL_dxr3video.c SDL12/src/video/dxr3/SDL_dxr3video.c
--- cvs/SDL12/src/video/dxr3/SDL_dxr3video.c	Thu Jan  1 01:00:00 1970
+++ SDL12/src/video/dxr3/SDL_dxr3video.c	Fri Nov 22 08:20:39 2002
@@ -0,0 +1,554 @@
+/*
+    SDL - Simple DirectMedia Layer
+    Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002  Sam Lantinga
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Library General Public
+    License as published by the Free Software Foundation; either
+    version 2 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Library General Public License for more details.
+
+    You should have received a copy of the GNU Library General Public
+    License along with this library; if not, write to the Free
+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+
+    Sam Lantinga
+    slouken@libsdl.org
+*/
+
+#ifdef SAVE_RCSID
+static char rcsid =
+ "@(#) $Id$";
+#endif
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include <unistd.h>
+#include <sys/ioctl.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <linux/em8300.h>
+
+#include "SDL.h"
+#include "SDL_error.h"
+#include "SDL_video.h"
+#include "SDL_mouse.h"
+#include "SDL_sysvideo.h"
+#include "SDL_pixels_c.h"
+#include "SDL_events_c.h"
+
+#include "SDL_dxr3video.h"
+#include "SDL_dxr3events_c.h"
+#include "SDL_dxr3mouse_c.h"
+
+#define DXR3VID_DRIVER_NAME "dxr3"
+
+/* Initialization/Query functions */
+static int DXR3_VideoInit(_THIS, SDL_PixelFormat *vformat);
+static SDL_Rect **DXR3_ListModes(_THIS, SDL_PixelFormat *format, Uint32 flags);
+static SDL_Surface *DXR3_SetVideoMode(_THIS, SDL_Surface *current, int width, int height, int bpp, Uint32 flags);
+static int DXR3_SetColors(_THIS, int firstcolor, int ncolors, SDL_Color *colors);
+static void DXR3_VideoQuit(_THIS);
+
+/* Hardware surface functions */
+static int DXR3_AllocHWSurface(_THIS, SDL_Surface *surface);
+static int DXR3_LockHWSurface(_THIS, SDL_Surface *surface);
+static void DXR3_UnlockHWSurface(_THIS, SDL_Surface *surface);
+static void DXR3_FreeHWSurface(_THIS, SDL_Surface *surface);
+
+/* etc. */
+static void DXR3_UpdateRects(_THIS, int numrects, SDL_Rect *rects);
+
+
+char* devname_v = "/dev/em8300_mv-0";
+char* devname_c = "/dev/em8300-0";
+
+#define OUTBUF_SIZE 1000000
+
+#define WIDTH 720
+#define HEIGHT 576
+
+static unsigned char gRed2y[256];
+static unsigned char gGreen2y[256];
+static unsigned char gBlue2y[256];
+static unsigned char gRed2v[256];
+static unsigned char gGreen2v[256];
+static unsigned char gBlue2v[256];
+static unsigned char gRed2u[256];
+static unsigned char gGreen2u[256];
+static unsigned char gBlue2u[256];
+
+/* initializes look-up tables to convert RGB(24/32) to YUV  */
+void initLookUpTableRgbtoYuv(void)
+{
+	int i;
+	double x;
+
+	for (i = 0; i < 256; i++) {
+		// values according to CCIR 601
+
+		// modify values so that Y ranges in [16..235] and U, V always range
+		// in [16..240]
+		x = 219.0 * (double)i / 255.0 + 16.0;
+				
+		gRed2y[i]   = (unsigned char)( 77.0 * x / 256.0);
+		gGreen2y[i] = (unsigned char)(150.0 * x / 256.0);
+		gBlue2y[i]  = (unsigned char)( 29.0 * x / 256.0);
+				
+		gRed2v[i]   = (unsigned char)(131.0 * x / 256.0 + 128.0);
+		gGreen2v[i] = (unsigned char)(110.0 * x / 256.0);
+		gBlue2v[i]  = (unsigned char)( 21.0 * x / 256.0);
+
+		gRed2u[i]   = (unsigned char)(-44.0 * x / 256.0 + 128.0);
+		gGreen2u[i] = (unsigned char)( 87.0 * x / 256.0);
+		gBlue2u[i]  = (unsigned char)(131.0 * x / 256.0);
+	}
+}
+
+/* convert bitmap from RGB24 bpp to YUV422 */
+void Rgb24toYuv(_THIS)
+{
+	struct SDL_PrivateVideoData *data = (struct SDL_PrivateVideoData*)this->hidden;
+	SDL_Surface *surface = this->screen;
+	char* dst = data->yuv;
+	int width = data->fame_yuv.w;
+	int height = data->fame_yuv.h;
+
+	int x, y;
+	int counter = 0;
+	
+	SDL_PixelFormat *fmt;
+	Uint32 temp, pixel;
+	Uint8 red, grn, blu;
+
+	unsigned char *d_y = dst;
+	unsigned char *d_u = dst+(width*height);
+	unsigned char *d_v = d_u+(width*height)/2;
+	
+	unsigned char *ptr = NULL;
+	
+	SDL_LockSurface(surface);
+	fmt=surface->format;
+	ptr = surface->pixels;
+	for (y = 1; y <= height; y++) {
+
+		for (x = 0; x < width; x+=2) {
+		pixel=*((Uint32*)ptr);
+
+		/* Get Red component */
+		temp=pixel&fmt->Rmask; /* Isolate red component */
+		temp=temp>>fmt->Rshift;/* Shift it down to 8-bit */
+		temp=temp<<fmt->Rloss; /* Expand to a full 8-bit number */
+		red=(Uint8)temp;
+	
+		/* Get Green component */
+		temp=pixel&fmt->Gmask; /* Isolate green component */
+		temp=temp>>fmt->Gshift;/* Shift it down to 8-bit */
+		temp=temp<<fmt->Gloss; /* Expand to a full 8-bit number */
+		grn=(Uint8)temp;
+
+		 /* Get Blue component */
+		temp=pixel&fmt->Bmask; /* Isolate blue component */
+		temp=temp>>fmt->Bshift;/* Shift it down to 8-bit */
+		temp=temp<<fmt->Bloss; /* Expand to a full 8-bit number */
+		blu=(Uint8)temp;	
+
+		*d_y++ = gRed2y[red] + gGreen2y[grn] + gBlue2y[blu]; // Y
+		if(y%2!=0) {
+		*d_u++ = gRed2u[red] - gGreen2u[grn] + gBlue2u[blu]; // U	
+		*d_v++ = gRed2v[red] - gGreen2v[grn] - gBlue2v[blu]; // V
+		}
+		ptr += 4;
+
+		pixel=*((Uint32*)ptr);
+		
+		/* Get Red component */
+		temp=pixel&fmt->Rmask; /* Isolate red component */
+		temp=temp>>fmt->Rshift;/* Shift it down to 8-bit */
+		temp=temp<<fmt->Rloss; /* Expand to a full 8-bit number */
+		red=(Uint8)temp;
+		
+		/* Get Green component */
+		temp=pixel&fmt->Gmask; /* Isolate green component */
+		temp=temp>>fmt->Gshift;/* Shift it down to 8-bit */
+		temp=temp<<fmt->Gloss; /* Expand to a full 8-bit number */
+		grn=(Uint8)temp;
+		
+		 /* Get Blue component */
+		temp=pixel&fmt->Bmask; /* Isolate blue component */
+		temp=temp>>fmt->Bshift;/* Shift it down to 8-bit */
+		temp=temp<<fmt->Bloss; /* Expand to a full 8-bit number */
+		blu=(Uint8)temp;	
+
+		*d_y++ = gRed2y[red] + gGreen2y[grn] + gBlue2y[blu]; // Y
+			
+		ptr += 4;
+		counter+=8;
+		}
+		
+		ptr += (data->w - data->fame_yuv.w)*4;
+	}
+	SDL_UnlockSurface(surface);
+//	printf("counter:%d\n",counter);
+}
+
+
+/* DXR3 driver bootstrap functions */
+
+static int DXR3_Available(void)
+{
+	const char *envr = getenv("SDL_VIDEODRIVER");
+	if ((envr) && (strcmp(envr, DXR3VID_DRIVER_NAME) == 0)) {
+		return(1);
+	}
+
+	return(0);
+}
+
+static void DXR3_DeleteDevice(SDL_VideoDevice *device)
+{
+	free(device->hidden);
+	free(device);
+}
+
+static SDL_VideoDevice *DXR3_CreateDevice(int devindex)
+{
+	SDL_VideoDevice *device;
+
+	/* Initialize all variables that we clean on shutdown */
+	device = (SDL_VideoDevice *)malloc(sizeof(SDL_VideoDevice));
+	if ( device ) {
+		memset(device, 0, (sizeof *device));
+		device->hidden = (struct SDL_PrivateVideoData *)
+				malloc((sizeof *device->hidden));
+	}
+	if ( (device == NULL) || (device->hidden == NULL) ) {
+		SDL_OutOfMemory();
+		if ( device ) {
+			free(device);
+		}
+		return(0);
+	}
+	memset(device->hidden, 0, (sizeof *device->hidden));
+
+	/* Set the function pointers */
+	device->VideoInit = DXR3_VideoInit;
+	device->ListModes = DXR3_ListModes;
+	device->SetVideoMode = DXR3_SetVideoMode;
+	device->CreateYUVOverlay = NULL;
+	device->SetColors = DXR3_SetColors;
+	device->UpdateRects = DXR3_UpdateRects;
+	device->VideoQuit = DXR3_VideoQuit;
+	device->AllocHWSurface = DXR3_AllocHWSurface;
+	device->CheckHWBlit = NULL;
+	device->FillHWRect = NULL;
+	device->SetHWColorKey = NULL;
+	device->SetHWAlpha = NULL;
+	device->LockHWSurface = DXR3_LockHWSurface;
+	device->UnlockHWSurface = DXR3_UnlockHWSurface;
+	device->FlipHWSurface = NULL;
+	device->FreeHWSurface = DXR3_FreeHWSurface;
+	device->SetCaption = NULL;
+	device->SetIcon = NULL;
+	device->IconifyWindow = NULL;
+	device->GrabInput = NULL;
+	device->GetWMInfo = NULL;
+	device->InitOSKeymap = DXR3_InitOSKeymap;
+	device->PumpEvents = DXR3_PumpEvents;
+
+	device->free = DXR3_DeleteDevice;
+
+	return device;
+}
+
+VideoBootStrap DXR3_bootstrap = {
+	DXR3VID_DRIVER_NAME, "SDL dxr3 video driver",
+	DXR3_Available, DXR3_CreateDevice
+};
+
+
+int DXR3_VideoInit(_THIS, SDL_PixelFormat *vformat)
+{
+	struct SDL_PrivateVideoData *data = (struct SDL_PrivateVideoData*)this->hidden;
+
+	fprintf(stderr, "WARNING: You are using the SDL dxr3 video driver w/ fame (0.1)!\n");
+
+	/* Determine the screen depth (use default 8-bit depth) */
+	/* we change this during the SDL_SetVideoMode implementation... */
+	vformat->BitsPerPixel = 8;
+	vformat->BytesPerPixel = 1;
+
+	/* fixme: 0 means stdin */
+	data->fd_keyboard = 0;
+
+	if ( DXR3_OpenKeyboard(this) < 0 ) {
+		DXR3_VideoQuit(this);
+		return(-1);
+	}
+
+	/* We're done! */
+	return(0);
+}
+
+SDL_Rect **DXR3_ListModes(_THIS, SDL_PixelFormat *format, Uint32 flags)
+{
+   	 return (SDL_Rect **) -1;
+}
+
+SDL_Surface *DXR3_SetVideoMode(_THIS, SDL_Surface *current,
+				int width, int height, int bpp, Uint32 flags)
+{
+	struct SDL_PrivateVideoData *data;
+
+	fame_parameters_t fame_params;
+	fame_object_t *fame_obj;
+
+	em8300_register_t reg;
+	int ioval = 0;
+	int tmp1, tmp2;
+
+	data = (struct SDL_PrivateVideoData*)this->hidden;
+
+	if ( this->hidden->buffer ) {
+		free( this->hidden->buffer );
+	}
+
+	this->hidden->buffer = malloc(width * height * (bpp / 8));
+	if ( ! this->hidden->buffer ) {
+		SDL_SetError("Couldn't allocate buffer for requested mode");
+		return(NULL);
+	}
+
+/* 	printf("Setting mode %dx%d\n", width, height); */
+
+	memset(this->hidden->buffer, 0, width * height * (bpp / 8));
+
+	/* Allocate the new pixel format for the screen */
+	if ( ! SDL_ReallocFormat(current, bpp, 0, 0, 0, 0) ) {
+		free(this->hidden->buffer);
+		this->hidden->buffer = NULL;
+		SDL_SetError("Couldn't allocate new pixel format for requested mode");
+		return(NULL);
+	}
+
+	/* Set up the new mode framebuffer */
+	current->flags = flags & SDL_FULLSCREEN;
+	this->hidden->w = current->w = width;
+	this->hidden->h = current->h = height;
+	current->pitch = current->w * (bpp / 8);
+	current->pixels = this->hidden->buffer;
+
+	/* Open and set up the dxr3 */
+	data->fd_video = open(devname_v, O_WRONLY);
+	if (data->fd_video < 0) {
+		SDL_SetError("Couldn't open video part of dxr3.");
+		return(NULL);
+	}
+	data->fd_control = open(devname_c, O_WRONLY);
+	if (data->fd_control < 0) {
+		close(data->fd_video);
+		SDL_SetError("Couldn't open control part of dxr3.");
+		return(NULL);
+	}
+
+	/* Set the playmode to play (just in case another app has set it to something else) */
+	ioval = EM8300_PLAYMODE_PLAY;
+	if (ioctl(data->fd_control, EM8300_IOCTL_SET_PLAYMODE, &ioval) < 0) {
+		close(data->fd_control); data->fd_control = -1;
+		close(data->fd_video); data->fd_video = -1;
+		SDL_SetError("Couldn't set playmode of dxr3.");
+		return(NULL);
+	}
+
+	/* Start em8300 prebuffering and sync engine */
+	reg.microcode_register = 1;
+	reg.reg = 0;
+	reg.val = MVCOMMAND_SYNC;
+	if (ioctl(data->fd_control, EM8300_IOCTL_WRITEREG, &reg)) {
+		close(data->fd_control); data->fd_control = -1;
+		close(data->fd_video); data->fd_video = -1;
+		SDL_SetError("Couldn't EM8300_IOCTL_WRITEREG (dxr3).");
+		return(NULL);
+	}
+	
+	/* Clean buffer by syncing it */
+	ioval = EM8300_SUBDEVICE_VIDEO;
+	ioctl(data->fd_control, EM8300_IOCTL_FLUSH, &ioval);
+
+	fsync(data->fd_video);
+
+	/* quick hack */
+	if( width > WIDTH ) {
+		fprintf(stderr, "WARNING: width (%d) out of bounds. cropping to %d pixels!\n",width,WIDTH);
+		width = WIDTH;
+	}
+	if( height > HEIGHT ) {
+		fprintf(stderr, "WARNING: height (%d) out of bounds. cropping to %d pixels!\n",height,HEIGHT);
+		height = HEIGHT;
+	}
+
+	tmp1 = abs(height - ((width / 4) * 3));
+	tmp2 = abs(height - (int)(width / 2.35));
+	if (tmp1 < tmp2) {
+		ioval = EM8300_ASPECTRATIO_4_3;
+	} else {
+		ioval = EM8300_ASPECTRATIO_16_9;
+	}
+	ioctl(data->fd_control, EM8300_IOCTL_SET_ASPECTRATIO, &ioval);
+	
+	data->outbuf = (unsigned char*)malloc(OUTBUF_SIZE);
+	if( data->outbuf == NULL) {
+		close(data->fd_control); data->fd_control = -1;
+		close(data->fd_video); data->fd_video = -1;
+		SDL_SetError("malloc() failed (dxr3).");
+		return(NULL);
+	}
+	data->yuv = (unsigned char*)malloc(width*height*2);
+	if( data->yuv == NULL) {
+		free(data->outbuf);
+		close(data->fd_control); data->fd_control = -1;
+		close(data->fd_video); data->fd_video = -1;
+		SDL_SetError("malloc() failed (dxr3).");
+		return(NULL);
+	}
+
+	data->fame_ctx = fame_open();
+	if( 0 == data->fame_ctx) {
+		close(data->fd_control); data->fd_control = -1;
+		close(data->fd_video); data->fd_video = -1;
+		free(data->outbuf); data->outbuf = 0;
+		free(data->yuv); data->yuv = 0;
+		SDL_SetError("fame_open() failed (dxr3).");
+		return(NULL);
+	}
+
+	fame_obj = fame_get_object(data->fame_ctx, "motion/pmvfast");
+	fame_register(data->fame_ctx, "motion", fame_obj);
+			
+	memset(&fame_params, 0, sizeof(fame_parameters_t));
+	fame_params.width = width;
+	fame_params.height = height;
+	fame_params.coding = "I";
+	fame_params.quality = 90;
+	fame_params.bitrate = 0;
+	fame_params.slices_per_frame = 1;
+	fame_params.frames_per_sequence = 25;
+	fame_params.shape_quality = 100;
+	fame_params.search_range = 1;
+	fame_params.verbose = 0;
+	fame_params.profile = NULL;
+
+	fame_params.frame_rate_num = 25;
+	fame_params.frame_rate_den = 1;
+
+	fame_init(data->fame_ctx, &fame_params, data->outbuf, OUTBUF_SIZE);
+
+	data->fame_yuv.w = width;
+	data->fame_yuv.h = height;
+	data->fame_yuv.y = data->yuv;
+	data->fame_yuv.u = data->fame_yuv.y + (width*height);
+	data->fame_yuv.v = data->fame_yuv.u + (width*height)/2;
+
+	initLookUpTableRgbtoYuv();
+
+	/* We're done */  
+	return(current);
+}
+
+/* We don't actually allow hardware surfaces other than the main one */
+static int DXR3_AllocHWSurface(_THIS, SDL_Surface *surface)
+{
+	return(-1);
+}
+static void DXR3_FreeHWSurface(_THIS, SDL_Surface *surface)
+{
+	return;
+}
+
+/* We need to wait for vertical retrace on page flipped displays */
+static int DXR3_LockHWSurface(_THIS, SDL_Surface *surface)
+{
+	return(0);
+}
+
+static void DXR3_UnlockHWSurface(_THIS, SDL_Surface *surface)
+{
+	return;
+}
+
+static void DXR3_UpdateRects(_THIS, int numrects, SDL_Rect *rects)
+{
+	int size = 0;
+	fame_frame_statistics_t stats;
+	
+	struct SDL_PrivateVideoData *data;
+	data = (struct SDL_PrivateVideoData*)this->hidden;
+	
+/*
+	for(i=0;i<numrects;i++) {
+		printf("%d-%d, %d-%d\n",rects->x,rects->y,rects->w,rects->h);
+	}
+*/
+	if( data->yuv != 0) {
+		Rgb24toYuv(this);
+	
+		fame_start_frame(data->fame_ctx,  &data->fame_yuv, NULL);
+		size = fame_encode_slice(data->fame_ctx);
+		fame_end_frame(data->fame_ctx,&stats);
+
+		
+		write(data->fd_video, data->outbuf, size);
+		write(data->fd_video, data->outbuf, size);
+	}
+	
+//	fprintf(stderr, "DUMMY_UpdateRects() out.\n");
+}
+
+int DXR3_SetColors(_THIS, int firstcolor, int ncolors, SDL_Color *colors)
+{
+	/* do nothing of note. */
+	return(1);
+}
+
+/* Note:  If we are terminated, this could be called in the middle of
+   another SDL video routine -- notably UpdateRects.
+*/
+void DXR3_VideoQuit(_THIS)
+{
+	struct SDL_PrivateVideoData *data;
+	data = (struct SDL_PrivateVideoData*)this->hidden;
+
+	if (this->screen->pixels != NULL)
+	{
+		free(this->screen->pixels);
+		this->screen->pixels = NULL;
+	}
+	if(0 != data->fame_ctx) {
+		fame_close(data->fame_ctx);
+		data->fame_ctx = 0;
+	}
+	if(0 != data->fd_video ) {
+		close(data->fd_video);
+		data->fd_video = -1;
+	}
+	if(0 != data->fd_control ) {
+		close(data->fd_control);
+		data->fd_control = -1;
+	}
+	if( 0 != data->yuv) {
+		free(data->yuv);
+		data->yuv = 0;
+	}
+	if( 0 != data->outbuf) {
+		free(data->outbuf);
+		data->outbuf = 0;
+	}
+	DXR3_CloseKeyboard(this);
+}
diff -u -r --new-file cvs/SDL12/src/video/dxr3/SDL_dxr3video.h SDL12/src/video/dxr3/SDL_dxr3video.h
--- cvs/SDL12/src/video/dxr3/SDL_dxr3video.h	Thu Jan  1 01:00:00 1970
+++ SDL12/src/video/dxr3/SDL_dxr3video.h	Fri Nov 22 08:20:20 2002
@@ -0,0 +1,65 @@
+/*
+    SDL - Simple DirectMedia Layer
+    Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002  Sam Lantinga
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Library General Public
+    License as published by the Free Software Foundation; either
+    version 2 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Library General Public License for more details.
+
+    You should have received a copy of the GNU Library General Public
+    License along with this library; if not, write to the Free
+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+
+    Sam Lantinga
+    slouken@libsdl.org
+*/
+
+#ifdef SAVE_RCSID
+static char rcsid =
+ "@(#) $Id$";
+#endif
+
+#ifndef _SDL_dxr3video_h
+#define _SDL_dxr3video_h
+
+#include <unistd.h>
+#include <string.h>
+#include <sys/ioctl.h>
+#include <sys/termios.h>
+
+#include <fame.h>
+
+#include "SDL_mouse.h"
+#include "SDL_sysvideo.h"
+#include "SDL_mutex.h"
+
+/* Hidden "this" pointer for the video functions */
+#define _THIS	SDL_VideoDevice *this
+
+
+/* Private display data */
+
+struct SDL_PrivateVideoData {
+    int w, h;
+    void *buffer;
+
+	fame_context_t *fame_ctx ;
+	fame_yuv_t fame_yuv;
+	
+	unsigned char* outbuf;
+	unsigned char *yuv;
+
+	int fd_video;
+	int fd_control;
+	struct termios tio_orig;
+	int fd_keyboard;
+	int posted;
+};
+
+#endif /* _SDL_dxr3video_h */
