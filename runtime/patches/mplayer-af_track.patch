Index: Makefile
===================================================================
--- Makefile	(revision 27667)
+++ Makefile	(working copy)
@@ -71,6 +71,7 @@
               libaf/af_surround.c \
               libaf/af_sweep.c \
               libaf/af_tools.c \
+              libaf/af_track.c \
               libaf/af_volnorm.c \
               libaf/af_volume.c \
               libaf/filter.c \
Index: libaf/control.h
===================================================================
--- libaf/control.h	(revision 27667)
+++ libaf/control.h	(working copy)
@@ -233,7 +233,18 @@
 #define AF_CONTROL_SS_FREQ		0x00002300 | AF_CONTROL_FILTER_SPECIFIC
 #define AF_CONTROL_SS_DECAY		0x00002400 | AF_CONTROL_FILTER_SPECIFIC
 
-#define AF_CONTROL_PLAYBACK_SPEED	0x00002500 | AF_CONTROL_FILTER_SPECIFIC
-#define AF_CONTROL_SCALETEMPO_AMOUNT	0x00002600 | AF_CONTROL_FILTER_SPECIFIC
+#define AF_CONTROL_PLAYBACK_SPEED	0x00002600 | AF_CONTROL_FILTER_SPECIFIC
+#define AF_CONTROL_SCALETEMPO_AMOUNT	0x00002700 | AF_CONTROL_FILTER_SPECIFIC
 
+// Track
+
+// Threshold power level for a audio packet
+#define AF_CONTROL_TRACK_THRESHOLD	0x00002800 | AF_CONTROL_FILTER_SPECIFIC
+
+// a quiet message is written after timeout seconds when power is below threshold
+#define AF_CONTROL_TRACK_TIMEOUT	0x00002900 | AF_CONTROL_FILTER_SPECIFIC
+
+// Not used
+#define AF_CONTROL_TRACK_ON_OFF		0x00002A00 | AF_CONTROL_FILTER_SPECIFIC
+
 #endif /* MPLAYER_CONTROL_H */
Index: libaf/af_track.c
===================================================================
--- libaf/af_track.c	(revision 0)
+++ libaf/af_track.c	(revision 0)
@@ -0,0 +1,290 @@
+/*=============================================================================
+   //
+   //  This software has been released under the terms of the GNU General Public
+   //  license. See http://www.gnu.org/copyleft/gpl.html for details.
+   //
+   //  Copyright 2008 Duncan Webb duncan@freevo.org
+   //
+   //  The purpase of this audio filter is to detect the end of a track. This is
+   //  achieved by measuring the power level across all channels and when it drops
+   //  below the threshold and remains below this threshold for more than timeout
+   //  msecs. When the quiet period has been detected then write a message to
+   //  stdout. The message can be picked up and an action can be taken. The reason
+   //  for doing this is to detect the end of a track for network streams when the
+   //  length of the audio is unknown.
+   //
+   //=============================================================================
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include <inttypes.h>
+#include <math.h>
+#include <limits.h>
+#include <time.h>
+
+#include "af.h"
+#include "mp_msg.h"
+
+
+enum states { SINITIAL, SLOUD, SQUIET, SQUIET2 };
+
+// Data for specific instances of this filter
+typedef struct af_track_s {
+	enum states state;              // state of audio
+	enum states laststate;          // previous state of audio
+	float threshold;                // power level for quiet audio across all channels
+	long timeout;                   // number of msecs seconds of quite audio
+	unsigned long ctimeout;         // number of timeout samples
+	unsigned long qcounter;         // number of quiet samples
+	unsigned long lcounter;         // number of loud samples
+	FILE *log;
+} af_track_t;
+
+// Initialization and runtime control
+static int control(struct af_instance_s *af, int cmd, void *arg)
+{
+	af_track_t *s = (af_track_t *)af->setup;
+
+	mp_msg(MSGT_AFILTER, MSGL_INFO, "[track] control(.., 0x%08x, ..)\n", cmd);
+	switch (cmd) {
+	case AF_CONTROL_POST_CREATE:
+		mp_msg(MSGT_AFILTER, MSGL_INFO, "[track] AF_CONTROL_POST_CREATE\n");
+		s->log = fopen("/tmp/power", "w");
+		fprintf(s->log, "[track] AF_CONTROL_POST_CREATE\n");
+		{
+			af_data_t *data = (af_data_t *)arg;
+			//void       *audio = data->audio;        // data buffer
+			//int        len = data->len;             // buffer length
+			int        rate = data->rate;           // sample rate (e.g. 44100)
+			int        nch = data->nch;             // number of channels (e.g. 2)
+			int        format = data->format;       // format
+			int        bps = data->bps;             // bytes per sample (4)
+			mp_msg(MSGT_AFILTER, MSGL_INFO, "rate=%d, nch=%d, format=%d, bps=%d\n", rate, nch, format, bps);
+		}
+		s->state = SINITIAL;
+		s->laststate = SINITIAL;
+		s->threshold = 0.0; //10 / 1,000,000.0;
+		s->timeout = 1500;
+		s->ctimeout = s->timeout * ((af_data_t *)arg)->rate / 1000;
+		s->lcounter = 0;
+		s->qcounter = 0;
+		return AF_UNKNOWN;
+
+	case AF_CONTROL_PRE_DESTROY:
+		mp_msg(MSGT_AFILTER, MSGL_INFO, "[track] AF_CONTROL_PRE_DESTROY\n");
+		fprintf(s->log, "[track] AF_CONTROL_PRE_DESTROY\n");
+		fclose(s->log);
+		return AF_UNKNOWN;
+
+	case AF_CONTROL_PLAYBACK_SPEED:
+		mp_msg(MSGT_AFILTER, MSGL_INFO, "[track] AF_CONTROL_PLAYBACK_SPEED\n");
+		fprintf(s->log, "[track] AF_CONTROL_PLAYBACK_SPEED\n");
+		return AF_UNKNOWN;
+
+	case AF_CONTROL_REINIT:
+		mp_msg(MSGT_AFILTER, MSGL_INFO, "[track] AF_CONTROL_REINIT\n");
+		fprintf(s->log, "[track] AF_CONTROL_REINIT\n");
+		// Sanity check
+		if (!arg) return AF_ERROR;
+		{
+			af_data_t *data = (af_data_t *)arg;
+			//void       *audio = data->audio;        // data buffer
+			//int        len = data->len;             // buffer length
+			int        rate = data->rate;           // sample rate (e.g. 44100)
+			int        nch = data->nch;             // number of channels (e.g. 2)
+			int        format = data->format;       // format
+			int        bps = data->bps;             // bytes per sample (4)
+			mp_msg(MSGT_AFILTER, MSGL_INFO, "rate=%d, nch=%d, format=%d, bps=%d\n", rate, nch, format, bps);
+			fprintf(s->log, "[track] rate=%d, nch=%d, format=%d, bps=%d\n", rate, nch, format, bps);
+		}
+
+		af->data->rate   = ((af_data_t *)arg)->rate;
+		af->data->nch    = ((af_data_t *)arg)->nch;
+		af->data->format = AF_FORMAT_FLOAT_NE;
+		af->data->bps    = 4;
+		s->ctimeout = s->timeout * ((af_data_t *)arg)->rate / 1000;
+
+		fprintf(s->log, "rate = %d\n", af->data->rate);
+		fprintf(s->log, "threshold = %.8f\n", s->threshold);
+		fprintf(s->log, "timeout = %ld\n", s->timeout);
+		fprintf(s->log, "ctimeout = %ld\n", s->ctimeout);
+
+		return af_test_output(af, (af_data_t *)arg);
+
+	case AF_CONTROL_INFO:
+		mp_msg(MSGT_AFILTER, MSGL_INFO, "[track] AF_CONTROL_INFO\n");
+		fprintf(s->log, "[track] AF_CONTROL_INFO\n");
+		return AF_UNKNOWN;
+
+	case AF_CONTROL_COMMAND_LINE:
+		mp_msg(MSGT_AFILTER, MSGL_INFO, "[track] AF_CONTROL_COMMAND_LINE '%s'\n", (char *)arg);
+		fprintf(s->log, "[track] AF_CONTROL_COMMAND_LINE\n");
+		{
+			float thr = s->threshold;
+			long  tim = s->timeout;
+			int   n;
+			n = sscanf((char *)arg, "%f:%li", &thr, &tim);
+			if (control(af, AF_CONTROL_TRACK_THRESHOLD | AF_CONTROL_SET, &thr) != AF_OK)
+				return AF_ERROR;
+			return control(af, AF_CONTROL_TRACK_TIMEOUT | AF_CONTROL_SET, &tim);
+		}
+
+	case AF_CONTROL_TRACK_THRESHOLD | AF_CONTROL_SET:
+		mp_msg(MSGT_AFILTER, MSGL_INFO, "[track] AF_CONTROL_TRACK_THRESHOLD | AF_CONTROL_SET %f\n", *(float *)arg);
+		fprintf(s->log, "[track] AF_CONTROL_TRACK_THRESHOLD | AF_CONTROL_SET %f\n", *(float *)arg);
+		s->threshold = *(float *)arg / 1000000.0;
+		return AF_OK;
+
+	case AF_CONTROL_TRACK_THRESHOLD | AF_CONTROL_GET:
+		mp_msg(MSGT_AFILTER, MSGL_INFO, "[track] AF_CONTROL_TRACK_THRESHOLD | AF_CONTROL_GET %f\n", *(float *)arg);
+		fprintf(s->log, "[track] AF_CONTROL_TRACK_THRESHOLD | AF_CONTROL_GET %f\n", *(float *)arg);
+		return AF_OK;
+
+	case AF_CONTROL_TRACK_TIMEOUT | AF_CONTROL_SET:
+		mp_msg(MSGT_AFILTER, MSGL_INFO, "[track] AF_CONTROL_TRACK_TIMEOUT | AF_CONTROL_SET %ld\n", *(long *)arg);
+		fprintf(s->log, "[track] AF_CONTROL_TRACK_TIMEOUT | AF_CONTROL_SET %ld\n", *(long *)arg);
+		s->timeout = *(long *)arg;
+		return AF_OK;
+
+	case AF_CONTROL_TRACK_TIMEOUT | AF_CONTROL_GET:
+		mp_msg(MSGT_AFILTER, MSGL_INFO, "[track] AF_CONTROL_TRACK_TIMEOUT | AF_CONTROL_GET %ld\n", *(long *)arg);
+		fprintf(s->log, "[track] AF_CONTROL_TRACK_TIMEOUT | AF_CONTROL_GET %ld\n", *(long *)arg);
+		return AF_OK;
+
+	case AF_CONTROL_TRACK_ON_OFF | AF_CONTROL_SET: // Not used
+		mp_msg(MSGT_AFILTER, MSGL_INFO, "[track] AF_CONTROL_TRACK_ON_OFF | AF_CONTROL_SET %d\n", *(int *)arg);
+		fprintf(s->log, "[track] AF_CONTROL_TRACK_ON_OFF | AF_CONTROL_SET %d\n", *(int *)arg);
+		return AF_OK;
+
+	case AF_CONTROL_TRACK_ON_OFF | AF_CONTROL_GET: // Not used
+		mp_msg(MSGT_AFILTER, MSGL_INFO, "[track] AF_CONTROL_TRACK_ON_OFF | AF_CONTROL_GET %d\n", *(int *)arg);
+		fprintf(s->log, "[track] AF_CONTROL_TRACK_ON_OFF | AF_CONTROL_GET %d\n", *(int *)arg);
+		return AF_OK;
+	}
+	return AF_UNKNOWN;
+}
+
+// Deallocate memory
+static void uninit(struct af_instance_s *af)
+{
+	if (af->data)
+		free(af->data);
+	if (af->setup)
+		free(af->setup);
+}
+
+static const char *statestr(enum states state)
+{
+	switch (state) {
+	case SINITIAL:
+		return "SINITIAL";
+	case SLOUD:
+		return "SLOUD";
+	case SQUIET:
+		return "SQUIET";
+	case SQUIET2:
+		return "SQUIET2";
+	}
+
+	return "SUNKNONW";
+}
+
+// Filter data through filter
+static af_data_t *play(struct af_instance_s *af, af_data_t *data)
+{
+	af_data_t   *c   = data;                                // Current working data
+	af_track_t  *s   = (af_track_t *)af->setup;             // Setup for this instance
+	float       *a   = (float *)c->audio;                   // Audio data
+	int          len = c->len / 4;                          // Number of samples
+	int          ch  = 0;                                   // Channel counter
+	register int nch = c->nch;                              // Number of channels
+	register int i   = 0;
+
+	// Noise track
+	for (i = 0; i < len; i += nch) {
+        unsigned long lcounter = s->lcounter;
+        unsigned long qcounter = s->qcounter;
+
+		// Calculate the power for all channels
+		register float power = 0;
+		for (ch = 0; ch < nch ; ch++) {
+			register float x   = a[i];
+			register float pow = x * x;
+			power += pow;
+		}
+
+		switch (s->state) {
+		case SINITIAL:
+			if (power > s->threshold) {
+				s->state = SLOUD;
+			}
+			break;
+
+		case SLOUD:
+			s->lcounter++;
+			if (power <= s->threshold) {
+				s->lcounter = 0;
+				s->state = SQUIET;
+			}
+			break;
+
+		case SQUIET:
+			s->qcounter++;
+			if (s->qcounter > s->ctimeout) {
+				long t = (s->qcounter * 1000) / c->rate;
+				mp_msg(MSGT_AFILTER, MSGL_INFO, "[track] quiet for %ld msecs\n", t);
+				fprintf(s->log, "[track] quiet for %ld msecs\n", t);
+				s->state = SQUIET2;
+			} else if (power > s->threshold) {
+				s->qcounter = 0;
+				s->state = SLOUD;
+			}
+			break;
+
+		case SQUIET2:
+			s->qcounter++;
+			if (power > s->threshold) {
+				long t = (s->qcounter * 1000) / c->rate;
+				mp_msg(MSGT_AFILTER, MSGL_INFO, "[track] quiet after %ld msecs\n", t);
+				fprintf(s->log, "[track] quiet after %ld msecs\n", t);
+				s->qcounter = 0;
+				s->state = SLOUD;
+			}
+			break;
+		}
+		if (s->laststate != s->state) {
+			fprintf(s->log, "state %s->%s: ", statestr(s->laststate), statestr(s->state));
+			fprintf(s->log, "%.8f %.8f %5lu %5lu %5lu\n", power, s->threshold, lcounter, qcounter, s->ctimeout);
+			s->laststate = s->state;
+		}
+	}
+
+	return c;
+}
+
+// Allocate memory and set function pointers
+static int af_open(af_instance_t *af)
+{
+	af->control = control;
+	af->uninit = uninit;
+	af->play = play;
+	af->mul = 1;
+	af->data = calloc(1, sizeof(af_data_t));
+	af->setup = calloc(1, sizeof(af_track_t));
+	if (af->data == NULL || af->setup == NULL)
+		return AF_ERROR;
+	return AF_OK;
+}
+
+// Description of this filter
+af_info_t af_info_track = {
+	"Track detect filter",
+	"track",
+	"Duncan",
+	"",
+	AF_FLAGS_NOT_REENTRANT,
+	af_open
+};
Index: libaf/af.c
===================================================================
--- libaf/af.c	(revision 27667)
+++ libaf/af.c	(working copy)
@@ -33,6 +33,7 @@
 extern af_info_t af_info_sinesuppress;
 extern af_info_t af_info_karaoke;
 extern af_info_t af_info_scaletempo;
+extern af_info_t af_info_track;
 
 static af_info_t* filter_list[]={ 
    &af_info_dummy,
@@ -67,6 +68,7 @@
    &af_info_sinesuppress,
    &af_info_karaoke,
    &af_info_scaletempo,
+   &af_info_track,
    NULL 
 };
 
