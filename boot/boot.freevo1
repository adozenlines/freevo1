#! /bin/sh
#
# script with commands to be executed from init on system startup to 
# start Freevo with a MGA G400 graphics card and a Lirc RS232 serial port
# remote control receiver.
#
# lirc = Linux Infrared Remote Control, www.lirc.org
#
# $Id$

#
# This script should be run in runlevel 3

###############################################################################
# 
# Init
#
###############################################################################

case "$1" in
    start)

        echo "Starting the Freevo application"

        #
        # Load the lirc serial driver module
        #
        # XXX This has to be copied here manually
        echo -n "Inserting the lirc_serial.o module... "
        insmod /usr/local/lib/lirc_serial.o
        echo Done

        #
        # Start the lirc daemon
        #
        # XXX You almost certainly want to change the remote control config file
        # XXX that is passed to lircd so that it matches the remote you're using!
        echo -n "Starting the lircd daemon... "
        /usr/local/sbin/lircd /usr/local/freevo/boot/URC-7201B00
        echo Done

        #
        # Insert the modified mga_vid.o MGA driver
        #
        echo -n "Inserting the mga_vid.o module... "
        insmod /usr/local/freevo/matrox_g400/mga_vid.o
        echo Done

        #
        # Run the script to setup a Matrox G400 adapter for TV-out
        #
        cd /usr/local/freevo/matrox_g400
        #/usr/local/freevo/matrox_g400/mga_ntsc_640x480.sh > /dev/null 2>&1
        /usr/local/freevo/matrox_g400/mga_ntsc_768x576.sh > /dev/null 2>&1

        #
        # Start Freevo in the background
        #
        # Log stdout and stderr to a file
        #
        # XXX Quick hack, the "freevo" script cannot find the startup.py file
        cd /usr/local/freevo/
        /usr/local/freevo/freevo --freevo=main-quiet --osd=fb  --remote=lirc-quiet \
           --videotools=real >> /usr/local/freevo/log_freevo 2>&1 &

        # Done
        ;;

    stop)
        echo "Stopping the Freevo application"

        kill -HUP `ps -ef | grep v4l1_to_mga | grep -v -e grep -e bin/sh | cut -c9-14` > /dev/null 2>&1 
        kill -HUP `ps -ef | grep startup.py | grep -v -e grep -e bin/sh | cut -c9-14` > /dev/null 2>&1 
        kill -HUP `ps -ef | grep main.py | grep -v -e grep -e bin/sh | cut -c9-14` > /dev/null 2>&1
        kill -HUP `ps -ef | grep remote.py | grep -v -e grep -e bin/sh | cut -c9-14` > /dev/null 2>&1
        kill -HUP `ps -ef | grep osd_fb | grep -v -e grep -e bin/sh | cut -c9-14` > /dev/null 2>&1

        killall lircd > /dev/null 2>&1
        rmmod lirc_serial > /dev/null 2>&1
        rmmod mga_vid > /dev/null 2>&1
        
        # Done
        ;;

    restart)
        # XXX this could probably be done a lot better...
        $0 stop
        $0 start

        # Done
        ;;

esac
