#! /bin/sh
#
# LSB init script for freevo
#
### BEGIN INIT INFO
# Provides: freevo
# Required-Start: $remote_fs lirc
# Required-Stop: $remote_fs
# Default-Start: 3 5
# Default-Stop: 0 1 2 6
# Description: Start freevo
### END INIT INFO

FREEVO_BIN=/usr/bin/freevo
test -x $FREEVO_BIN || exit 5

FREEVO_CONFIG1=/etc/freevo/freevo.conf
test -r $FREEVO_CONFIG1 || exit 6

FREEVO_CONFIG2=/etc/freevo/local_conf.py
test -r $FREEVO_CONFIG2 || exit 6

FREEVO_SYSCONFIG=/etc/sysconfig/freevo
test -r $FREEVO_SYSCONFIG || exit 6
. $FREEVO_SYSCONFIG

PYTHON_BIN="/usr/bin/python2.3"
PIDFILE="/var/run/freevo"
LOGFILE="/var/log/freevo"

. /etc/rc.status

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_failed        set local and overall rc status to failed
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status

# First reset status of this service
rc_reset

case "$1" in
    start)
	echo -n "Starting Freevo"
	if [ $FREEVO_SET_RTC == 1 ] ; then
	    /sbin/sysctl -w dev.rtc.max-user-freq=1024 > /dev/null
	fi
	if [ $FREEVO_KEYBOARD == 0 ] ; then
	    export SDL_NOKEYBOARD=true
	fi
	# There is no mouse support in Freevo
	export SDL_NOMOUSE=true
	export USER=root
	export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

	startproc -l $LOGFILE -p $PIDFILE $FREEVO_BIN

	# Remember status and be verbose
	rc_status -v
	;;
    stop)
	echo -n "Shutting down Freevo"
	killproc -G -p $PIDFILE $PYTHON_BIN

	# Remember status and be verbose
	rc_status -v
	;;
    try-restart)
        ## Stop the service and if this succeeds (i.e. the 
        ## service was running before), start it again.
        $0 status >/dev/null &&  $0 restart

        # Remember status and be quiet
        rc_status
        ;;
    restart)
        ## Stop the service and regardless of whether it was
        ## running or not, start it again.
        $0 stop
        $0 start

        # Remember status and be quiet
        rc_status
        ;;
    force-reload|reload)
	## Signal the daemon to reload its config. Most daemons
	## do this on signal 1 (SIGHUP).

	echo -n "Reload service Freevo"
	
	$0 restart

        rc_status -v

        ;;
    status)
	echo -n "Checking for service Freevo "
        ## Check status with checkproc(8), if process is running
        ## checkproc will return with exit status 0.

        # Status has a slightly different for the status command:
        # 0 - service running
        # 1 - service dead, but /var/run/  pid  file exists
        # 2 - service dead, but /var/lock/ lock file exists
        # 3 - service not running

	checkproc -p $PIDFILE $PYTHON_BIN

	rc_status -v
	;;
    *)
	echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload|probe}"
	exit 1
	;;
esac
rc_exit
